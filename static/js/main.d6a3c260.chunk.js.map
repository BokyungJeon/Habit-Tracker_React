{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/navbar.jsx","app.jsx","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","console","log","this","name","count","className","onClick","PureComponent","HabitAddForm","memo","formRef","React","createRef","inputRef","onSubmit","event","preventDefault","current","value","onAdd","reset","ref","type","placeholder","Habits","handleAdd","habits","map","id","onReset","Component","Navbar","totalCount","App","state","item","setState","filter","Date","now","handleReset","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAEqBA,E,4MASnBC,gBAAkB,WAChB,EAAKC,MAAMC,YAAY,EAAKD,MAAME,Q,EAGpCC,gBAAkB,WAChB,EAAKH,MAAMI,YAAY,EAAKJ,MAAME,Q,EAGpCG,aAAe,WACb,EAAKL,MAAMM,SAAS,EAAKN,MAAME,Q,uDAjBjC,WACEK,QAAQC,IAAR,iBAAsBC,KAAKT,MAAME,MAAMQ,KAAvC,e,kCAGF,WACEH,QAAQC,IAAR,iBAAsBC,KAAKT,MAAME,MAAMQ,KAAvC,oB,oBAeF,WAAS,MAGiBD,KAAKT,MAAME,MAA3BQ,EAHD,EAGCA,KAAMC,EAHP,EAGOA,MAEd,OADAJ,QAAQC,IAAR,iBAAsBE,IAEpB,qBAAIE,UAAU,QAAd,UACE,sBAAMA,UAAU,aAAhB,SAA8BF,IAC9B,sBAAME,UAAU,cAAhB,SAA+BD,IAC/B,wBACEC,UAAU,8BACVC,QAASJ,KAAKV,gBAFhB,SAIE,mBAAGa,UAAU,yBAEf,wBACEA,UAAU,8BACVC,QAASJ,KAAKN,gBAFhB,SAIE,mBAAGS,UAAU,0BAEf,wBACEA,UAAU,4BACVC,QAASJ,KAAKJ,aAFhB,SAIE,mBAAGO,UAAU,0B,GA9CYE,iBCwBpBC,EAvBMC,gBAAK,SAAChB,GACzB,IAAMiB,EAAUC,IAAMC,YAChBC,EAAWF,IAAMC,YAQvB,OACE,uBAAMP,UAAU,WAAWS,SAPZ,SAACC,GAChBA,EAAMC,iBACN,IAAMb,EAAOU,EAASI,QAAQC,MAC9Bf,GAAQV,EAAM0B,MAAMhB,GACpBO,EAAQO,QAAQG,SAGhB,UACE,uBACEC,IAAKR,EACLS,KAAK,OACLjB,UAAU,YACVkB,YAAY,0BAEd,wBAAQlB,UAAU,aAAlB,uBCjBemB,E,4MASnBhC,gBAAkB,SAACG,GACjB,EAAKF,MAAMC,YAAYC,I,EAGzBC,gBAAkB,SAACD,GACjB,EAAKF,MAAMI,YAAYF,I,EAOzB8B,UAAY,SAACtB,GACX,EAAKV,MAAM0B,MAAMhB,I,4CAGnB,WAAU,IAAD,OAEP,OADAH,QAAQC,IAAI,UAEV,qCACE,cAAC,EAAD,CAAckB,MAAOjB,KAAKuB,YAC1B,6BACGvB,KAAKT,MAAMiC,OAAOC,KAAI,SAAChC,GAAD,OACrB,cAAC,EAAD,CAEEA,MAAOA,EACPD,YAAa,EAAKF,gBAClBK,YAAa,EAAKD,gBAClBG,SAAU,EAAKN,MAAMM,UAJhBJ,EAAMiC,SAYjB,wBAAQvB,UAAU,eAAeC,QAASJ,KAAKT,MAAMoC,QAArD,8B,GA7C4BC,aCWrBC,E,4JAZb,WAEE,OADA/B,QAAQC,IAAI,UAEV,sBAAKI,UAAU,SAAf,UACE,mBAAGA,UAAU,4BACb,iDACA,sBAAMA,UAAU,eAAhB,SAAgCH,KAAKT,MAAMuC,oB,GAP9BzB,iBC8FN0B,E,4MA1FbC,MAAQ,CACNR,OAAQ,CACN,CAAEE,GAAI,EAAGzB,KAAM,UAAWC,MAAO,GACjC,CAAEwB,GAAI,EAAGzB,KAAM,UAAWC,MAAO,GACjC,CAAEwB,GAAI,EAAGzB,KAAM,SAAUC,MAAO,K,EAIpCZ,gBAAkB,SAACG,GACjB,IAAM+B,EAAS,EAAKQ,MAAMR,OAAOC,KAAI,SAACQ,GACpC,OAAIA,EAAKP,KAAOjC,EAAMiC,GACb,2BAAKjC,GAAZ,IAAmBS,MAAOT,EAAMS,MAAQ,IAEnC+B,KAET,EAAKC,SAAS,CAAEV,Y,EAYlB9B,gBAAkB,SAACD,GACjB,IAAM+B,EAAS,EAAKQ,MAAMR,OAAOC,KAAI,SAACQ,GACpC,GAAIA,EAAKP,KAAOjC,EAAMiC,GAAI,CACxB,IAAMxB,EAAQT,EAAMS,MAAQ,EAC5B,OAAO,2BAAKT,GAAZ,IAAmBS,MAAOA,EAAQ,EAAI,EAAIA,IAE5C,OAAO+B,KAET,EAAKC,SAAS,CAAEV,Y,EASlB5B,aAAe,SAACH,GACdK,QAAQC,IAAR,uBAA4BN,EAAMQ,OAElC,IAAMuB,EAAS,EAAKQ,MAAMR,OAAOW,QAAO,SAACF,GAAD,OAAUA,EAAKP,KAAOjC,EAAMiC,MACpE,EAAKQ,SAAS,CAAEV,Y,EAGlBD,UAAY,SAACtB,GACX,IAAMuB,EAAM,sBAAO,EAAKQ,MAAMR,QAAlB,CAA0B,CAAEE,GAAIU,KAAKC,MAAOpC,OAAMC,MAAO,KACrE,EAAKgC,SAAS,CAAEV,Y,EAGlBc,YAAc,WACZ,IAAMd,EAAS,EAAKQ,MAAMR,OAAOC,KAAI,SAAChC,GACpC,OAAoB,IAAhBA,EAAMS,MACD,2BAAKT,GAAZ,IAAmBS,MAAO,IAErB,eAAKT,MAEd,EAAKyC,SAAS,CAAEV,Y,4CAQlB,WACE,OACE,qCACE,cAAC,EAAD,CACEM,WAAY9B,KAAKgC,MAAMR,OAAOW,QAAO,SAACF,GAAD,OAAUA,EAAK/B,MAAQ,KAAGqC,SAEjE,cAAC,EAAD,CACEf,OAAQxB,KAAKgC,MAAMR,OACnBhC,YAAaQ,KAAKV,gBAClBK,YAAaK,KAAKN,gBAClBG,SAAUG,KAAKJ,aACfqB,MAAOjB,KAAKuB,UACZI,QAAS3B,KAAKsC,qB,GApFNV,a,YCElBY,IAASC,OACP,cAAC,IAAMC,WAAP,UAEE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d6a3c260.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\n\nexport default class Habit extends PureComponent {\n  componentDidMount() {\n    console.log(`habit: ${this.props.habit.name} mounted`);\n  }\n\n  componentWillUnmount() {\n    console.log(`habit: ${this.props.habit.name} will unmount`);\n  }\n\n  handleIncrement = () => {\n    this.props.onIncrement(this.props.habit);\n  };\n\n  handleDecrement = () => {\n    this.props.onDecrement(this.props.habit);\n  };\n\n  handleDelete = () => {\n    this.props.onDelete(this.props.habit);\n  };\n\n  render() {\n    // console.log(this.props.habit);\n    // const habitName = this.props.habit.name;\n    const { name, count } = this.props.habit;\n    console.log(`habit: ${name}`);\n    return (\n      <li className=\"habit\">\n        <span className=\"habit-name\">{name}</span>\n        <span className=\"habit-count\">{count}</span>\n        <button\n          className=\"habit-button habit-increase\"\n          onClick={this.handleIncrement}\n        >\n          <i className=\"fas fa-plus-square\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-decrease\"\n          onClick={this.handleDecrement}\n        >\n          <i className=\"fas fa-minus-square\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-delete\"\n          onClick={this.handleDelete}\n        >\n          <i className=\"fas fa-trash\"></i>\n        </button>\n      </li>\n    );\n  }\n}\n","import React, { memo } from 'react';\n\n// memo라는 함수안에 function 컴포넌트를 전달하면 PureComponent처럼 작용\nconst HabitAddForm = memo((props) => {\n  const formRef = React.createRef();\n  const inputRef = React.createRef();\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    const name = inputRef.current.value;\n    name && props.onAdd(name);\n    formRef.current.reset();\n  };\n  return (\n    <form className=\"add-form\" onSubmit={onSubmit}>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        className=\"add-input\"\n        placeholder=\"Please Add Your Habit\"\n      />\n      <button className=\"add-button\">Add</button>\n    </form>\n  );\n});\n\nexport default HabitAddForm;\n\n// // PureComponent는 최상위 데이터가 변하지 않으면 render함수가 호출되지 않음. 즉 re-rendering을 하지 않음.\n// class HabitAddForm extends PureComponent {\n//   // 리액트에서는 Dom요소를 직접적으로 쓰지 않기 때문에 리액트에서 다른 리액트 요소에 접근하고 싶다면 Ref를 쓴다.\n//   formRef = React.createRef();\n//   inputRef = React.createRef();\n\n//   onSubmit = (event) => {\n//     // 브라우저는 기본적으로 submit이 되면 refresh됨 이것을 막기 위해 event.preventDefault();\n//     event.preventDefault();\n//     // console.log(this.inputRef.current.value);\n//     const name = this.inputRef.current.value;\n//     name && this.props.onAdd(name);\n//     this.formRef.current.reset();\n//   };\n//   render() {\n//     console.log('habitAddForm');\n//     return (\n//       <form className=\"add-form\" onSubmit={this.onSubmit}>\n//         <input\n//           ref={this.inputRef}\n//           type=\"text\"\n//           className=\"add-input\"\n//           placeholder=\"Please Add Your Habit\"\n//         />\n//         <button className=\"add-button\">Add</button>\n//       </form>\n//     );\n//   }\n// }\n\n// export default HabitAddForm;\n","import React, { Component } from 'react';\nimport Habit from './habit';\nimport HabitAddForm from './habitAddForm';\n\nexport default class Habits extends Component {\n  // state = {\n  //     habits: [\n  //         { id: 1, name: 'Reading', count: 0 },\n  //         { id: 2, name: 'Running', count: 0 },\n  //         { id: 3, name: 'Coding', count: 0 },\n  //     ],\n  // };\n\n  handleIncrement = (habit) => {\n    this.props.onIncrement(habit);\n  };\n\n  handleDecrement = (habit) => {\n    this.props.onDecrement(habit);\n  };\n\n  //   handleDelete = (habit) => {\n  //     this.props.onDelete(habit);\n  //   };\n\n  handleAdd = (name) => {\n    this.props.onAdd(name);\n  };\n\n  render() {\n    console.log('habits');\n    return (\n      <>\n        <HabitAddForm onAdd={this.handleAdd} />\n        <ul>\n          {this.props.habits.map((habit) => (\n            <Habit\n              key={habit.id}\n              habit={habit}\n              onIncrement={this.handleIncrement}\n              onDecrement={this.handleDecrement}\n              onDelete={this.props.onDelete}\n              // 이렇게 바로 호출하면 위에 일일이 멤버변수를 작성하지 않아도 된다.\n              // 대신 멤버함수가 호출 될 때마다 에로우함수가 매번 만들어지므로 메모리에 영향을 미친다.\n              // 이정도는 상대적으로 큰 영향을 미치지 않아서 괜찮다.\n              // 단, 절대 이렇게 사용하면 안되는 경우도 있다. 후에 리액트 훅에서 설명.\n            />\n          ))}\n        </ul>\n        <button className=\"habits-reset\" onClick={this.props.onReset}>\n          Reset All\n        </button>\n      </>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nclass Navbar extends PureComponent {\n  render() {\n    console.log('navbar');\n    return (\n      <div className=\"navbar\">\n        <i className=\"navbar-logo fas fa-leaf\"></i>\n        <span>Habit Tracker</span>\n        <span className=\"navbar-count\">{this.props.totalCount}</span>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport './app.css';\nimport Habits from './components/habits';\nimport Navbar from './components/navbar';\n\nclass App extends Component {\n  state = {\n    habits: [\n      { id: 1, name: 'Reading', count: 0 },\n      { id: 2, name: 'Running', count: 0 },\n      { id: 3, name: 'Coding', count: 0 },\n    ],\n  };\n\n  handleIncrement = (habit) => {\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        return { ...habit, count: habit.count + 1 };\n      }\n      return item;\n    });\n    this.setState({ habits });\n    // console.log(`handleIncrement ${habit.name}`);\n    // 리액트에서는 state를 직접 수정하면 안된다.\n    // 배열의 spread operator연산자 [...]을 통해 기존 state.habits의 항목들을 복사한다.\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // habits[index].count++;\n    // this.setState({ habits });\n    // 이것도 state를 직접 변경하므로 옳지 않다. 추후에 설명.\n    // habits: habits 키와 값으로 들어가는 로컬벨류의 이름이 같은 경우 하나로 생략 가능.\n  };\n\n  handleDecrement = (habit) => {\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        const count = habit.count - 1;\n        return { ...habit, count: count < 0 ? 0 : count };\n      }\n      return item;\n    });\n    this.setState({ habits });\n    // console.log(`handleDecrement ${habit.name}`);\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // const count = habits[index].count - 1;\n    // habits[index].count = count < 0 ? 0 : count;\n    // this.setState({ habits });\n  };\n\n  handleDelete = (habit) => {\n    console.log(`handleDelete ${habit.name}`);\n    // filter: 특정한 것을 제외 또는 포함하여 새로운 배열을 만드는 배열의 API\n    const habits = this.state.habits.filter((item) => item.id !== habit.id);\n    this.setState({ habits });\n  };\n\n  handleAdd = (name) => {\n    const habits = [...this.state.habits, { id: Date.now(), name, count: 0 }];\n    this.setState({ habits });\n  };\n\n  handleReset = () => {\n    const habits = this.state.habits.map((habit) => {\n      if (habit.count !== 0) {\n        return { ...habit, count: 0 };\n      }\n      return { ...habit };\n    });\n    this.setState({ habits });\n    // const habits = this.state.habits.map((habit) => {\n    //   habit.count = 0;\n    //   return habit;\n    // });\n    // this.setState({ habits });\n  };\n\n  render() {\n    return (\n      <>\n        <Navbar\n          totalCount={this.state.habits.filter((item) => item.count > 0).length}\n        />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport '@fortawesome/fontawesome-free/js/all.js';\nimport SimpleHabit from './components/simpleHabit';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <SimpleHabit /> */}\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}